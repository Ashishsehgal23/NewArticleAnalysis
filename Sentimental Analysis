import feedparser
from textblob import TextBlob
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from collections import Counter

NewsFeedNyt = feedparser.parse("https://rss.nytimes.com/services/xml/rss/nyt/World.xml")
NewsFeedCBS = feedparser.parse("https://www.cbsnews.com/latest/rss/world")
NewsFeedDMUk = feedparser.parse("https://www.dailymail.co.uk/news/worldnews/index.rss")
NewsFeedWTimes = feedparser.parse("https://www.washingtontimes.com/rss/headlines/news/world/")

storeNyt = []
storeCBS = []
storeDMUk = []
storeWTimes = []

TstoreNyt = []
TstoreCBS = []
TstoreDMUk = []
TstoreWTimes = []

entryNyt = NewsFeedNyt.entries
entryCBS = NewsFeedCBS.entries
entryDMUk = NewsFeedDMUk.entries
entryWTimes = NewsFeedWTimes.entries


for story in entryNyt:
	if story.title not in storeNyt:
		storeNyt.append(story.title)		
for story in entryCBS:
	if story.title not in storeCBS:
		storeCBS.append(story.title)

for story in entryDMUk:
	if story.title not in storeDMUk:
		storeDMUk.append(story.title)
		
for story in entryWTimes:
	if story.title not in storeWTimes:
		storeWTimes.append(story.title)
		
#Tokenizing
for x in storeNyt:
	tokens = word_tokenize(x)
	for y in tokens:
		TstoreNyt.append(y)
		
for x in storeCBS:
	tokens = word_tokenize(x)
	for y in tokens:
		TstoreCBS.append(y)

for x in storeDMUk:
	tokens = word_tokenize(x)
	for y in tokens:
		TstoreDMUk.append(y)
		
for x in storeWTimes:
	tokens = word_tokenize(x)
	for y in tokens:
		TstoreWTimes.append(y)
		
#Cleaning Data


eng_stop_words = set(stopwords.words('english'))
cStoreNyt = [x for x in TstoreNyt if x.isalpha() and not x.lower() in eng_stop_words ]
cStoreCBS = [x for x in TstoreCBS if x.isalpha() and not x.lower() in eng_stop_words ]
cStoreDMUk = [x for x in TstoreDMUk if x.isalpha() and not x.lower() in eng_stop_words ]
cStoreWTimes = [x for x in TstoreWTimes if x.isalpha() and not x.lower() in eng_stop_words]


#Sentimental Analysis

#sumpol = 0
c = []
for x in storeCBS:
	pol = TextBlob(x).sentiment.polarity
	if  pol > 0:
		c.append("Positive")
	elif pol == 0:
		c.append("Neutral")
	else:
		c.append("Negative")
print(Counter(c).most_common())
#avgpol = sumpol/len(cStoreNyt)
#print(avgpol)
#print(cStoreCBS)
#print(cStoreDMUk)
#print(cStoreWTimes)
